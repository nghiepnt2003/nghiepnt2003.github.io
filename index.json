[
{
	"uri": "http://nghiepnt2003.github.io/",
	"title": "AWS Basic Labs: Create and Configure an AWS VPC with Public and Private Subnets, Internet Gateway, Route Tables, and Security Groups",
	"tags": [],
	"description": "",
	"content": "AWS Basic Labs: Create and Configure an AWS VPC with Public and Private Subnets, Internet Gateway, Route Tables, and Security Groups Overview In this lab, you will learn how to create and configure an AWS VPC with both Public and Private Subnets. You will walk through the steps to set up essential networking components, including:\nCreate a new VPC: Create a VPC with a custom CIDR range. Create Public and Private Subnets: Divide the VPC into Public and Private Subnets to manage network traffic. Create and configure an Internet Gateway: Connect your VPC to the Internet so that instances in the Public Subnet can communicate with the outside world. Create and configure Route Tables: Route traffic to the Internet Gateway for the Public Subnet and set up Route Tables for the Private Subnet. Configure Security Groups: Set up security rules to allow or deny network traffic to instances within the VPC. Launch and test EC2 Instances (Optional): Deploy EC2 instances to test network connectivity and ensure the configuration works as expected. Clean up resources: Remove the resources you created after completing the lab. This lab provides step-by-step guidance to help you set up a basic AWS networking environment suitable for deploying applications and services in a VPC.\nTable of Contents Introduction to VPC and Subnets Prerequisites Create a New VPC Create Public and Private Subnets Create and Configure an Internet Gateway Create and Configure Route Tables Configure Security Groups Launch and Test EC2 Instances (Optional) Clean up Resources "
},
{
	"uri": "http://nghiepnt2003.github.io/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Virtual Private Cloud (VPC) A Virtual Private Cloud (VPC) is a service provided by Amazon Web Services (AWS) that allows you to create a separate virtual network within the AWS cloud environment. You can configure your VPC to meet requirements for security, connectivity, and resource distribution, while providing an isolated network environment for your applications.\nKey Components of VPC CIDR Block: This is the IP range you allocate to your VPC, for example: 10.0.0.0/16. Subnets: These are subdivisions of the VPC, allowing you to organize network resources into different sections (subnets). Subnets can be categorized into Public (accessible from the internet) and Private (not directly accessible from the internet). Internet Gateway (IGW): This is a gateway that you attach to the VPC to allow instances in the Public Subnet to connect to the internet. Route Tables: Define how network traffic is routed between subnets and other network components. NAT Gateway: Enables instances in the Private Subnet to access the internet via the Internet Gateway. Public and Private Subnets Public Subnets Public Subnets are subnets that can be directly accessed from the internet. Instances in Public Subnets usually have public IPs and can communicate with internet services. Examples include web servers and load balancers.\nPrivate Subnets Private Subnets are subnets that cannot be accessed directly from the internet. Instances in Private Subnets typically do not have public IPs and can only communicate with resources within the same VPC or via a NAT Gateway.\nWhy Use Public and Private Subnets? Dividing your network into Public and Private Subnets improves security and organization. Web applications or services that need internet access can be placed in Public Subnets, while databases or backend services can be placed in Private Subnets to protect them from direct external access.\nIn the next lab, we will guide you through the steps to prepare and create a VPC with both Public and Private Subnets on AWS.\n"
},
{
	"uri": "http://nghiepnt2003.github.io/2-prerequiste/",
	"title": "Preparation Steps",
	"tags": [],
	"description": "",
	"content": "Before starting the lab to create an AWS VPC with Public and Private Subnets, you need to go through some important preparation steps. These steps will ensure that you have everything necessary to effectively perform the configuration and deployment.\n1. Create an AWS Account If you don\u0026rsquo;t have an AWS account, you need to create one. Go to the AWS Management Console and follow the instructions to sign up.\n2. Configure Access Permissions Ensure that your AWS account has full access permissions to create and manage network resources like VPC, Subnets, Internet Gateway, and Route Tables. You might need the following permissions:\nec2:CreateVpc ec2:CreateSubnet ec2:CreateInternetGateway ec2:CreateRouteTable ec2:AssociateRouteTable ec2:CreateSecurityGroup If you\u0026rsquo;re using IAM (Identity and Access Management), make sure that your IAM user or role has these permissions.\n3. Install AWS CLI (Optional) To easily manage AWS resources and execute commands from the command line, you can install AWS CLI. You can follow the instructions at the AWS CLI User Guide.\n4. Get Familiar with AWS Management Console Log in to AWS Management Console and get familiar with the user interface. Ensure that you know how to navigate through sections such as the VPC Dashboard, EC2 Dashboard, and Route Tables.\n5. Define Network Requirements Before starting, define your network requirements, including:\nIP range for your VPC (CIDR Block). For example: 10.0.0.0/16. IP ranges for the Public and Private Subnets. For example: Public Subnet 10.0.1.0/24 and Private Subnet 10.0.2.0/24. 6. Prepare Configuration Information Document the necessary configuration details, including:\nCIDR Block for VPC and Subnets. Names and descriptions for the network components (if necessary). Security requirements, including rules for Security Groups. Once you have completed these preparation steps, you\u0026rsquo;ll be ready to start the lab exercises and configure your VPC.\n"
},
{
	"uri": "http://nghiepnt2003.github.io/3-create-vpc/",
	"title": "Create VPC",
	"tags": [],
	"description": "",
	"content": "In this step, you will learn how to create a new Virtual Private Cloud (VPC) in AWS. A VPC is a virtual networking environment that you can configure to deploy AWS resources, such as EC2 instances, within a secure and isolated network.\nContent Open the VPC Service In the AWS Management Console, find and select VPC under Networking \u0026amp; Content Delivery or type \u0026ldquo;VPC\u0026rdquo; in the search bar. In the VPC dashboard, select Your VPCs from the left-hand navigation menu.\nClick the Create VPC button. Configure the VPC Name tag: Enter a name for your VPC. IPv4 CIDR block: Enter the IP range for the VPC. This IP range will define the IP address space that your VPC will use. IPv6 CIDR block: (Optional) If you wish to use IPv6, you can select an IPv6 CIDR block. If not, leave it blank. Tenancy: Select Default. This allows you to use EC2 instances with shared hardware. If you need dedicated hardware, you can select Dedicated. Confirm and Create Click the Create VPC button to create the new VPC. Once complete, click the View VPC button. Review the newly created VPC. Return to the Your VPCs dashboard and confirm that your new VPC has been successfully created. You will see the VPC\u0026rsquo;s name, ID, and CIDR IP range. "
},
{
	"uri": "http://nghiepnt2003.github.io/4-create-subnets/",
	"title": "Creating Public and Private Subnets",
	"tags": [],
	"description": "",
	"content": "After creating the VPC, the next step is to create Public and Private Subnets within that VPC. Subnets help you divide your network into different zones to manage network traffic and enhance security.\nStep 1: Create a Public Subnet Open the VPC Service:\nIn the AWS Management Console, find and select VPC from the Networking \u0026amp; Content Delivery section or type \u0026ldquo;VPC\u0026rdquo; in the search bar. Select Subnets:\nIn the left-hand navigation panel, choose Subnets. Click the Create Subnet Button:\nClick Create subnet to start the process of creating a new subnet. Configure the Public Subnet:\nVPC: Select the VPC you created from the dropdown menu. Name tag: Enter a name for the Public Subnet, e.g., PublicSubnet. Availability Zone: Choose an Availability Zone (AZ) where you want the Public Subnet to reside. IPv4 CIDR block: Enter the IP range for the Public Subnet. This range must be within the CIDR range of the VPC you created. IPv6 CIDR block: (Optional) If you are using IPv6, you can select an IPv6 CIDR block. Otherwise, leave it blank. Click the Create Subnet Button:\nClick Create subnet to create the Public Subnet. Step 2: Create a Private Subnet Select Subnets:\nIn the left-hand navigation panel, choose Subnets. Click the Create Subnet Button:\nClick Create subnet to start the process of creating a new subnet. Configure the Private Subnet:\nVPC: Select the VPC you created from the dropdown menu. Name tag: Enter a name for the Private Subnet, e.g., PrivateSubnet.\nAvailability Zone: Choose an Availability Zone (AZ) where you want the Private Subnet to reside.\nIPv4 CIDR block: Enter the IP range for the Private Subnet, e.g., 10.0.2.0/24. This range must be within the CIDR range of the VPC you created.\nIPv6 CIDR block: (Optional) If you are using IPv6, you can select an IPv6 CIDR block. Otherwise, leave it blank. Click the Create Subnet Button:\nClick Create subnet to create the Private Subnet. Step 3: Verify the New Subnets Return to the Subnets Dashboard:\nIn the Subnets dashboard, you will see the list of subnets you created. Check Subnet Information:\nConfirm that your Public and Private Subnets have been successfully created. You will see the name, ID, and CIDR block of each subnet. With the Public and Private Subnets created, you have completed the network segmentation within your VPC. The next steps will guide you on how to configure Internet Gateway and Route Tables to complete your network setup.\n"
},
{
	"uri": "http://nghiepnt2003.github.io/5-create-configure-igw/",
	"title": "Create and Configure an Internet Gateway",
	"tags": [],
	"description": "",
	"content": "An Internet Gateway (IGW) is a crucial component in AWS networking architecture that allows instances in a subnet to communicate with the internet. In this section, you will learn how to create and configure an Internet Gateway to connect a Public Subnet to the internet.\nStep 1: Create an Internet Gateway (IGW) Open the VPC Service:\nAccess the VPC Dashboard in the AWS Management Console or type VPC in the search bar. Select Internet Gateways:\nIn the VPC console, select Internet Gateways from the left-hand navigation pane. Click Create Internet Gateway:\nClick the Create internet gateway button to start the process of creating an Internet Gateway. Configure IGW:\nName tag: Enter a name for your Internet Gateway, e.g., MyInternetGateway. Click Create internet gateway to complete the creation process. Attach Internet Gateway to VPC:\nAfter creating the IGW, click Actions and select Attach to VPC. In the pop-up window, select the VPC you created or the default VPC, then click Attach internet gateway. Step 2: Configure Route Table for Public Subnet Add Route to Internet Gateway:\nSelect the Routes tab and click Edit routes. Click Add route: Destination: Enter 0.0.0.0/0 (this is the range for all internet traffic). Target: Choose the Internet Gateway you created from the list. Click Save Changes to apply the changes.\nStep 3: Verify Configuration Verify the Internet Gateway: Ensure that the IGW has been Attached to the VPC you are using. Verify the Route Table: Confirm that the Route Table for the Public Subnet has a route with 0.0.0.0/0 and a Target of the Internet Gateway. Result After completing the steps above, the Internet Gateway (IGW) will have been created and attached to your VPC. The IGW will function as a gateway for instances in the VPC to communicate with the internet. Note that to enable the Public Subnet to connect to the internet, you still need to configure the Route Table for the Public Subnet, which will be covered in a later section.\n"
},
{
	"uri": "http://nghiepnt2003.github.io/6-create-configure-route-tables/",
	"title": "Create and Configure Route Tables",
	"tags": [],
	"description": "",
	"content": "Route Tables are a critical component in AWS VPC, helping to route traffic between subnets and between the VPC and the internet. In this section, you will create and configure Route Tables to connect Public and Private Subnets.\nStep 1: Create a Route Table for Public Subnet Access the VPC Service:\nGo to the VPC Dashboard in the AWS Management Console or type VPC in the search bar. Select Route Tables:\nIn the VPC Dashboard, select Route Tables from the left-hand navigation pane. Click Create Route Table:\nClick the Create route table button to create a new Route Table. Configure the Route Table:\nName: Provide a name for the Route Table (e.g., my-route-table). VPC: Select the VPC you created previously. Click Create Route Table to complete the process. Step 2: Configure Route for Public Subnet Select the Route Table Created:\nSelect the Route Table you just created (e.g., PublicRouteTable). Add a Route to the Internet Gateway:\nGo to the Routes tab and click Edit routes. Click Add route and configure as follows: Destination: Enter 0.0.0.0/0 (represents all IP addresses on the internet). Target: Choose the Internet Gateway (IGW) you created earlier from the list. Save Configuration:\nClick Save routes to apply the Route Table changes. Associate with Public Subnet:\nGo to the Subnet associations tab and click Edit subnet associations. Select your Public Subnet from the list and click Save associations to associate the Route Table with the Public Subnet. Step 3: Create a Route Table for Private Subnet Click Create Route Table:\nCreate another Route Table for the Private Subnet (e.g., PrivateRouteTable). Do Not Add Internet Gateway for Private Subnet:\nIn the Route Table for the Private Subnet, do not add a route 0.0.0.0/0 pointing to the Internet Gateway, to ensure that the Private Subnet cannot directly connect to the internet. Associate with Private Subnet:\nSimilarly to the above steps, in the Subnet associations tab, select the Private Subnet and click Save associations. Result Public Subnet: Has been associated with a Route Table that includes a route to the Internet Gateway, allowing EC2 instances in the Public Subnet to access the internet. Private Subnet: Has its own Route Table, and does not have direct internet access, ensuring security for internal resources. "
},
{
	"uri": "http://nghiepnt2003.github.io/7-configure-security-groups/",
	"title": "Configuring Security Groups",
	"tags": [],
	"description": "",
	"content": "Security Groups act as virtual firewalls at the instance level in AWS, helping to control inbound and outbound traffic for resources within a VPC. In this section, you\u0026rsquo;ll learn how to create and configure Security Groups to protect your instances.\nStep 1: Create a New Security Group Open the EC2 Service:\nGo to the EC2 Dashboard in the AWS Management Console or type EC2 in the search bar. Select Security Groups:\nIn the left navigation pane, select Security Groups under the Network \u0026amp; Security section. Click Create Security Group:\nClick the Create security group button to start the process of creating a new Security Group. Configure the Security Group:\nName tag: Enter a name for your Security Group, e.g., MyPublicSG. Description: Provide a description, e.g., Security group for public instances. VPC: Select the VPC you created in previous steps. Step 2: Configure Inbound Rules Add an Inbound Rule:\nClick Add rule to add inbound rules. Type: Select HTTP (or any other service you want to allow). Source: Choose Anywhere (0.0.0.0/0) if you want to allow access from any IP address. Repeat the process to add rules for other services such as HTTPS or SSH (if you need SSH access to the instance). Add an Inbound Rule for SSH (optional):\nType: Select SSH. Source: Choose My IP to allow SSH access only from your IP address. Save Configuration:\nAfter adding the rules, click Create security group to complete the setup. Step 3: Configure Outbound Rules Default Outbound Rules: Security Groups by default allow all outbound traffic. You can review the Outbound rules section and either keep the default configuration or customize it as needed. Step 4: Assign Security Group to Instance Assign Security Group to Instance:\nWhen you create or launch a new EC2 instance, ensure that you assign the Security Group you just created to the instance. Verify Connectivity:\nAfter assigning the Security Group, you can verify connectivity by accessing the instance\u0026rsquo;s public IP to ensure that the inbound rules like HTTP, HTTPS, or SSH are working correctly. Result The Security Group has been successfully configured and assigned to your EC2 Instance. The inbound and outbound rules have been set up to protect your network resources, allowing connections to the services you need.\n"
},
{
	"uri": "http://nghiepnt2003.github.io/8-create-test-ec2/",
	"title": "Create and Test EC2 Instances (Optional)",
	"tags": [],
	"description": "",
	"content": "In this section, you\u0026rsquo;ll create one or more EC2 instances to test the network connectivity of the Public and Private Subnets you configured earlier. This ensures that instances can access the Internet (for Public Subnets) or not (for Private Subnets), depending on your configuration.\nStep 1: Create EC2 Instances Open the EC2 Service:\nGo to the EC2 Dashboard in the AWS Management Console or type EC2 in the search bar. Click the Launch Instance Button:\nClick Launch Instance to start the process of creating a new instance. Select an AMI (Amazon Machine Image):\nChoose an appropriate Amazon Machine Image (AMI), such as Amazon Linux 2 AMI or Ubuntu Server. This is the operating system image for your instance. Choose an Instance Type:\nSelect the instance type that suits your needs, such as t2.micro (free if you are within the Free Tier usage limits). Configure the Instance:\nNetwork: Select the VPC you created. Subnet: Choose Public Subnet (or Private Subnet if you want to test no internet connectivity). Auto-assign Public IP: For Public Subnet, select Enable to assign a public IP to the instance. Configure the Security Group:\nSelect the Security Group you created in previous steps or create a new one. Make sure you open necessary ports like HTTP (80), HTTPS (443), and SSH (22) if you need access to the instance. Review and Launch:\nReview your instance configuration and click Launch. Select a key pair to access the instance. If you don’t have a key pair, create a new one and download it. Then, click Launch Instances. Check the Instance:\nGo to Instances in the EC2 Dashboard to check the status of your instance. You will see the status as running once the instance is successfully started. Step 2: Test Connectivity Connect to the EC2 Instance:\nFor instances in the Public Subnet, you can connect via SSH (if you chose Amazon Linux or Ubuntu) or RDP (if you chose Windows) using the public IP. Use an SSH command like the following: ssh -i \u0026#34;your-key.pem\u0026#34; ec2-user@\u0026lt;public-ip\u0026gt; For instances in the Private Subnet, you need to connect through an instance in the Public Subnet with a bastion or VPN role. Test Internet Connectivity:\nFor instances in the Public Subnet, check internet connectivity using commands like ping or curl to a website, for example: curl http://www.google.com For instances in the Private Subnet, ensure it cannot access the Internet (if configured correctly), but can still connect to other services within the VPC. Result After completing these steps, you will be able to verify that EC2 instances in the Public Subnet can access the Internet, while instances in the Private Subnet cannot. This confirms that your network configurations are working as expected.\n"
},
{
	"uri": "http://nghiepnt2003.github.io/9-cleanup/",
	"title": "Clean Up Resources",
	"tags": [],
	"description": "",
	"content": "After completing the lab and checking the results, you should clean up the AWS resources you created to avoid incurring unwanted costs. In this section, you\u0026rsquo;ll learn how to delete components such as VPCs, Subnets, Internet Gateways, Route Tables, Security Groups, and EC2 Instances that you created during the lab.\nStep 1: Delete EC2 Instances Open the EC2 Service:\nAccess the EC2 Dashboard in the AWS Management Console or type EC2 in the search bar. Select Instances:\nIn Instances, select the instances you want to delete. Ensure you have selected the correct instances to delete. Click the Actions Button:\nClick Actions, then select Instance State \u0026gt; Terminate. Confirm Termination:\nConfirm that you want to terminate the selected instances. After termination, the instances will be removed from the list and will no longer incur charges. Step 2: Delete Internet Gateway Open the VPC Service:\nAccess the VPC Dashboard in the AWS Management Console. Select Internet Gateways:\nIn the VPC console, select Internet Gateways from the left-hand navigation pane. Select and Detach Internet Gateway:\nSelect the Internet Gateway you want to delete. Click Actions and select Detach from VPC. Delete Internet Gateway:\nAfter detaching, select the Internet Gateway, click Actions, and select Delete internet gateway. Step 3: Delete Route Tables Open the VPC Service:\nAccess the VPC Dashboard in the AWS Management Console or type VPC in the search bar. Select Route Tables:\nIn the VPC console, select Route Tables from the left-hand navigation pane. Select and Delete Route Table:\nSelect the Route Table you want to delete. Click Actions and select Delete route table. Note that you cannot delete the default Route Table of the VPC.\nStep 4: Delete Security Groups Open the VPC Service:\nAccess the VPC Dashboard in the AWS Management Console or type VPC in the search bar. Select Security Groups:\nIn the VPC console, select Security Groups from the left-hand navigation pane. Select and Delete Security Group:\nSelect the Security Group you want to delete. Click Actions and select Delete security group. Note that you cannot delete the default Security Group. Step 5: Delete Subnets Open the VPC Service:\nAccess the VPC Dashboard in the AWS Management Console or type VPC in the search bar. Select Subnets:\nIn the VPC console, select Subnets from the left-hand navigation pane. Select and Delete Subnet:\nSelect the Subnet you want to delete. Click Actions and select Delete subnet. Note that you need to delete all resources in the Subnet before you can delete the Subnet. Step 6: Delete VPC Open the VPC Service:\nAccess the VPC Dashboard in the AWS Management Console or type VPC in the search bar. Select VPCs:\nIn the VPC console, select VPCs from the left-hand navigation pane. Select and Delete VPC:\nSelect the VPC you want to delete. Click Actions and select Delete VPC. Note that you need to delete all resources in the VPC before you can delete the VPC. Result After completing the above steps, all resources you created during the lab will be removed from your AWS account, helping you avoid unwanted costs. You can check AWS services to ensure that no resources related to the lab remain.\n"
},
{
	"uri": "http://nghiepnt2003.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://nghiepnt2003.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]